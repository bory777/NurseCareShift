{"version":3,"sources":["components/AuthContext.tsx","pages/Home.tsx","pages/Login.tsx","components/LogoutButton.tsx","pages/Dashboard.tsx","pages/PostArticle.tsx","pages/UnderstoodArticles.tsx","pages/ReviewArticles.tsx","components/ProtectedRoute.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["AuthContext","createContext","undefined","useAuth","context","useContext","Error","AuthProvider","_ref","children","token","setToken","useState","localStorage","getItem","useEffect","storedToken","React","createElement","Provider","value","login","newToken","setItem","logout","removeItem","Home","className","src","alt","Link","to","Login","email","setEmail","password","setPassword","error","setError","navigate","useNavigate","onSubmit","async","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","message","data","err","type","placeholder","onChange","target","LogoutButton","onClick","handleLogout","genres","name","link","Dashboard","profile","setProfile","understoodArticles","setUnderstoodArticles","reviewArticles","setReviewArticles","Authorization","then","catch","id","FaCheckCircle","FaRedoAlt","style","width","Carousel","showArrows","showThumbs","infiniteLoop","centerMode","centerSlidePercentage","autoPlay","interval","transitionTime","map","genre","key","href","PostArticle","title","setTitle","mainImage","setMainImage","mainImagePreview","setMainImagePreview","success","setSuccess","editor","useEditor","extensions","StarterKit","Image","content","onUpdate","console","log","getHTML","accept","file","files","URL","createObjectURL","EditorContent","UnderstoodArticles","article","ReviewArticles","ProtectedRoute","Outlet","Navigate","Navbar","Fragment","App","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.60f58a24.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\n\n// AuthContextの型定義\ninterface AuthContextType {\n  token: string | null;\n  login: (token: string) => void;\n  logout: () => void;\n}\n\n// AuthContextを作成\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// useAuthカスタムフックを作成して、簡単にAuthContextにアクセスできるようにする\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// AuthProviderコンポーネント\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      setToken(storedToken);\n    }\n  }, []);\n\n  const login = (newToken: string) => {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../components/AuthContext';\n\nconst Home: React.FC = () => {\n  const { token } = useAuth(); // ログイン状態を取得\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"relative flex-1\">\n        <img\n          src=\"https://via.placeholder.com/1920x1080\"\n          alt=\"Nurse working\"\n          className=\"w-full h-full object-cover\"\n        />\n\n        <div className=\"absolute inset-0 flex flex-col justify-center items-center text-center bg-blue-300 bg-opacity-50\">\n          <h2 className=\"text-5xl font-bold text-white mb-6\">看護師のための技術共有プラットフォーム</h2>\n          <p className=\"text-lg text-gray-200 mb-8\">\n            看護師が学んだ知識や技術を共有し、レビューし合い、スキルを高め合うための場所です。\n          </p>\n\n          {token ? (\n            <Link\n              to=\"/dashboard\"\n              className=\"bg-blue-400 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-full shadow-lg transition duration-300\"\n            >\n              ダッシュボードに移動する\n            </Link>\n          ) : (\n            <Link\n              to=\"/login\"\n              className=\"bg-blue-400 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-full shadow-lg transition duration-300\"\n            >\n              ログインして始める\n            </Link>\n          )}\n        </div>\n      </div>\n\n      <footer className=\"bg-blue-200 text-white py-6\">\n        <div className=\"container mx-auto text-center\">\n          <p>&copy; 2024 NurseCareShift. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../components/AuthContext';\n\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const { token, login } = useAuth();\n\n  // すでにログインしている場合はダッシュボードへリダイレクト\n  useEffect(() => {\n    if (token) {\n      navigate('/dashboard');\n    }\n  }, [token, navigate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    try {\n      const response = await fetch('http://localhost:8000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'ログインに失敗しました');\n      }\n\n      const data = await response.json();\n      login(data.token);\n      navigate('/dashboard');\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center items-center bg-blue-100\">\n      <div className=\"bg-white p-6 rounded shadow-md w-full max-w-sm\">\n        <h2 className=\"text-2xl font-bold text-blue-600 mb-6 text-center\">ログイン</h2>\n        {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            placeholder=\"メールアドレス\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className=\"w-full p-2 mb-4 border border-gray-300 rounded\"\n          />\n          <input\n            type=\"password\"\n            placeholder=\"パスワード\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"w-full p-2 mb-4 border border-gray-300 rounded\"\n          />\n          <button type=\"submit\" className=\"w-full bg-blue-400 hover:bg-blue-500 text-white font-bold py-2 px-4 rounded\">\n            ログイン\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","// src/components/LogoutButton.tsx\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './AuthContext'; // AuthContextを使うためにインポート\n\nconst LogoutButton: React.FC = () => {\n  const { logout } = useAuth(); // AuthContextからlogout関数を取得\n  const navigate = useNavigate(); // ログアウト後にリダイレクトするためのナビゲートフック\n\n  const handleLogout = () => {\n    logout(); // ログアウト処理\n    navigate('/login'); // ログインページにリダイレクト\n  };\n\n  return (\n    <button\n      onClick={handleLogout}\n      className=\" hover:bg-blue-600 text-white font-bold py-2 px-5 mx-3 rounded\"\n    >\n      ログアウト\n    </button>\n  );\n};\n\nexport default LogoutButton;\n","// src/pages/Dashboard.tsx\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from '../components/AuthContext';\nimport LogoutButton from '../components/LogoutButton';\nimport { Carousel } from 'react-responsive-carousel';\nimport { FaCheckCircle, FaRedoAlt } from 'react-icons/fa';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\n\nconst genres = [\n  { name: '血圧', link: '/articles/blood-pressure' },\n  { name: '呼吸', link: '/articles/respiration' },\n  { name: '脳神経', link: '/articles/neurology' },\n  { name: '心拍数', link: '/articles/heart-rate' },\n  { name: '体温', link: '/articles/body-temperature' },\n  // 他のジャンルも追加可能\n];\n\nconst Dashboard: React.FC = () => {\n  const [profile, setProfile] = useState<{ id: number; email: string } | null>(null);\n  const [understoodArticles, setUnderstoodArticles] = useState<number>(10); // 理解した記事数\n  const [reviewArticles, setReviewArticles] = useState<number>(5); // 復習したい記事数\n  const [error, setError] = useState<string | null>(null);\n  const { token } = useAuth();\n\n  useEffect(() => {\n    if (!token) {\n      setError('ログインが必要です');\n      return;\n    }\n\n    // プロフィール取得のAPIリクエスト\n    fetch('http://localhost:8000/api/profile', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('プロフィールの取得に失敗しました');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setProfile(data);\n      })\n      .catch((err) => {\n        setError(err.message);\n      });\n  }, [token]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center bg-blue-50 p-10\">\n      <div className=\"w-full max-w-6xl\">\n        <h2 className=\"text-3xl font-bold text-blue-600 mb-8 text-center\">ダッシュボード</h2>\n\n        {/* ユーザーIDと進捗状況のカード */}\n        <div className=\"flex w-full space-x-6\">\n          {/* 左側: ユーザープロフィールカード */}\n          <div className=\"w-1/3 bg-white p-8 rounded-lg shadow-lg text-center\">\n            <h3 className=\"text-2xl font-semibold text-gray-700\">ユーザープロフィール</h3>\n            {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n            {profile ? (\n              <div className=\"space-y-6 mt-4\">\n                <p className=\"text-lg font-medium text-gray-700\">ユーザーID: {profile.id}</p>\n\n                {/* 理解した記事数 */}\n                <div className=\"flex items-center justify-center bg-blue-100 p-4 rounded-lg shadow-md\">\n                  <FaCheckCircle className=\"text-blue-500 text-3xl mr-2\" />\n                  <p className=\"text-2xl font-bold text-blue-500\">理解した: {understoodArticles}</p>\n                </div>\n\n                {/* 復習したい記事数 */}\n                <div className=\"flex items-center justify-center bg-yellow-100 p-4 rounded-lg shadow-md\">\n                  <FaRedoAlt className=\"text-yellow-500 text-3xl mr-2\" />\n                  <p className=\"text-2xl font-bold text-yellow-500\">復習したい: {reviewArticles}</p>\n                </div>\n\n                {/* ログアウトボタン */}\n                <div className=\"mt-6\">\n                  <LogoutButton />\n                </div>\n              </div>\n            ) : (\n              !error && <p>プロフィールを読み込み中...</p>\n            )}\n          </div>\n\n          {/* 右側: 進捗状況のカード */}\n          <div className=\"w-2/3 bg-white p-8 rounded-lg shadow-lg\">\n            <h3 className=\"text-2xl font-semibold text-gray-700 text-center mb-6\">進捗状況</h3>\n            <div className=\"space-y-4\">\n              {/* 診療科別の進捗バー */}\n              <div>\n                <p className=\"text-lg font-semibold text-gray-700\">外科</p>\n                <div className=\"w-full bg-gray-300 rounded-full h-4\">\n                  <div className=\"bg-blue-500 h-4 rounded-full\" style={{ width: '60%' }}></div>\n                </div>\n                <p className=\"text-right text-gray-500 text-sm mt-1\">60% 完了</p>\n              </div>\n\n              <div>\n                <p className=\"text-lg font-semibold text-gray-700\">内科</p>\n                <div className=\"w-full bg-gray-300 rounded-full h-4\">\n                  <div className=\"bg-blue-500 h-4 rounded-full\" style={{ width: '40%' }}></div>\n                </div>\n                <p className=\"text-right text-gray-500 text-sm mt-1\">40% 完了</p>\n              </div>\n\n              <div>\n                <p className=\"text-lg font-semibold text-gray-700\">小児科</p>\n                <div className=\"w-full bg-gray-300 rounded-full h-4\">\n                  <div className=\"bg-blue-500 h-4 rounded-full\" style={{ width: '80%' }}></div>\n                </div>\n                <p className=\"text-right text-gray-500 text-sm mt-1\">80% 完了</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* カルーセル部分 */}\n        <div className=\"mt-12 w-full\">\n          <Carousel\n            showArrows={false}\n            showThumbs={false}\n            infiniteLoop\n            centerMode\n            centerSlidePercentage={20} // 5つ表示\n            autoPlay\n            interval={3000}\n            transitionTime={500}\n          >\n            {genres.map((genre) => (\n              <div key={genre.name} className=\"p-4\">\n                <a href={genre.link} className=\"block bg-gray-200 p-6 rounded-lg shadow-md hover:bg-blue-200\">\n                  <p className=\"text-xl font-semibold text-gray-700\">{genre.name}</p>\n                </a>\n              </div>\n            ))}\n          </Carousel>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState } from 'react';\nimport { EditorContent, useEditor } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Image from '@tiptap/extension-image';\nimport '../styles/PostArticle.css';\n\nconst PostArticle: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [mainImage, setMainImage] = useState<File | null>(null);\n  const [mainImagePreview, setMainImagePreview] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  // TipTapのエディタを初期化\n  const editor = useEditor({\n    extensions: [StarterKit, Image],  // StarterKit + 画像アップロード拡張\n    content: '',\n    onUpdate: ({ editor }) => {\n      console.log('Content:', editor.getHTML());  // エディタの内容が更新された時にコンソールに表示\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!title || !editor?.getHTML()) {\n      setError('タイトルと内容を入力してください');\n      return;\n    }\n\n    // 記事投稿処理（メイン画像と記事内容を送信する処理をここで実装）\n  };\n\n  const handleMainImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files ? e.target.files[0] : null;\n    setMainImage(file);\n    if (file) {\n      setMainImagePreview(URL.createObjectURL(file));\n    } else {\n      setMainImagePreview(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-white\">\n      {/* タイトル行 */}\n      <div className=\"flex justify-between items-center p-4 border-b border-gray-300\">\n        <input\n          type=\"text\"\n          placeholder=\"タイトルを入力してください\"\n          className=\"flex-grow text-4xl font-bold p-2 focus:outline-none\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        {/* 投稿ボタン */}\n        <button\n          onClick={handleSubmit}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 ml-4 rounded-lg transition duration-300\"\n        >\n          投稿する\n        </button>\n      </div>\n\n      {/* メイン画像アップロード */}\n      <div className=\"p-4\">\n        <label className=\"block text-lg font-medium text-gray-700 mb-2\">メイン画像</label>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleMainImageChange}\n          className=\"mb-4 p-2 border border-gray-300 rounded-lg\"\n        />\n        {mainImagePreview && (\n          <div className=\"mb-4\">\n            <img src={mainImagePreview} alt=\"Main Preview\" className=\"w-full h-auto max-h-96 object-cover\" />\n          </div>\n        )}\n      </div>\n\n      {/* TipTapエディタ */}\n      <div className=\"editor-container p-4 border-t border-gray-300\">\n        <EditorContent editor={editor} />\n      </div>\n\n      {error && <p className=\"text-red-500 text-center mt-4\">{error}</p>}\n      {success && <p className=\"text-green-500 text-center mt-4\">{success}</p>}\n    </div>\n  );\n};\n\nexport default PostArticle;\n","// UnderstoodArticles.tsx\nimport React from 'react';\n\nconst UnderstoodArticles: React.FC = () => {\n  const articles = [\n    { id: 1, title: '記事 1' },\n    { id: 2, title: '記事 2' },\n  ];\n\n  return (\n    <div className=\"min-h-screen p-8 bg-gray-100\">\n      <h2 className=\"text-2xl font-bold mb-6\">理解した記事</h2>\n      <ul>\n        {articles.map((article) => (\n          <li key={article.id}>{article.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UnderstoodArticles;\n","// ReviewArticles.tsx\nimport React from 'react';\n\nconst ReviewArticles: React.FC = () => {\n  const articles = [\n    { id: 1, title: '記事 3' },\n    { id: 2, title: '記事 4' },\n  ];\n\n  return (\n    <div className=\"min-h-screen p-8 bg-gray-100\">\n      <h2 className=\"text-2xl font-bold mb-6\">復習したい記事</h2>\n      <ul>\n        {articles.map((article) => (\n          <li key={article.id}>{article.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ReviewArticles;\n","import React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useAuth } from './AuthContext'; // AuthContextを使用\n\nconst ProtectedRoute: React.FC = () => {\n  const { token } = useAuth(); // ログイン状態を取得\n  console.log('ProtectedRoute - トークン確認: ', token);\n\n  // トークンがなければログインページにリダイレクト\n  if (!token) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  // トークンがあれば、保護されたコンテンツを表示\n  return <Outlet />;\n};\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\nimport LogoutButton from './LogoutButton';\n\nconst Navbar: React.FC = () => {\n  const { token } = useAuth(); // ログイン状態を取得\n\n  return (\n    <nav className=\"bg-blue-100 p-4 text-blue-500\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <div>\n          <Link to=\"/\" className=\"text-blue-600 font-bold text-3xl\">\n            NurseCareShift\n          </Link>\n        </div>\n        <div>\n          {token ? (\n            <>\n              <Link to=\"/dashboard\" className=\"ml-4 hover:bg-white py-2 px-5 font-bold rounded\">\n                ダッシュボード\n              </Link>\n              <Link to=\"/post-article\" className=\"ml-4 hover:bg-white py-2 px-5 font-bold rounded\">\n                記事投稿\n              </Link>\n              <LogoutButton /> {/* ログアウトボタン */}\n            </>\n          ) : (\n            <Link to=\"/login\" className=\"ml-4 hover:underline\">\n              ログイン\n            </Link>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport PostArticle from './pages/PostArticle'; // 新しい記事投稿ページ\nimport UnderstoodArticles from './pages/UnderstoodArticles'; // 理解した記事ページ\nimport ReviewArticles from './pages/ReviewArticles'; // 復習したい記事ページ\nimport ProtectedRoute from './components/ProtectedRoute';\nimport { AuthProvider } from './components/AuthContext';\nimport Navbar from './components/Navbar';\n\nconst App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <div>\n          {/* ナビゲーションバーを全ページで表示 */}\n          <Navbar />\n          <Routes>\n            {/* ホームページとログインページ */}\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/login\" element={<Login />} />\n\n            {/* 認証が必要なルート (ProtectedRoute) */}\n            <Route element={<ProtectedRoute />}>\n              <Route path=\"/dashboard\" element={<Dashboard />} />\n              <Route path=\"/understood-articles\" element={<UnderstoodArticles />} /> {/* 理解した記事 */}\n              <Route path=\"/review-articles\" element={<ReviewArticles />} /> {/* 復習したい記事 */}\n              <Route path=\"/post-article\" element={<PostArticle />} /> {/* 記事投稿ルート */}\n            </Route>\n          </Routes>\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n// console.log(document.getElementById('root'));\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}